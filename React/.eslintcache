[{"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/index.tsx":"1","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/reportWebVitals.ts":"2","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/App.tsx":"3","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Register.tsx":"4","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Login.tsx":"5","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Home.tsx":"6","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/components/Nav.tsx":"7","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Admin.tsx":"8"},{"size":500,"mtime":1695363776800,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1695363776802,"results":"11","hashOfConfig":"10"},{"size":1669,"mtime":1696172007843,"results":"12","hashOfConfig":"10"},{"size":1519,"mtime":1695363776801,"results":"13","hashOfConfig":"10"},{"size":1501,"mtime":1696164468398,"results":"14","hashOfConfig":"10"},{"size":6682,"mtime":1696171983103,"results":"15","hashOfConfig":"10"},{"size":1532,"mtime":1696086020308,"results":"16","hashOfConfig":"10"},{"size":10972,"mtime":1696171983101,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"36g6ha",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/index.tsx",[],["38","39"],"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/reportWebVitals.ts",[],"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/App.tsx",["40"],"import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Login from \"./pages/Login\";\nimport Nav from \"./components/Nav\";\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Admin from \"./pages/Admin\";\nimport Register from \"./pages/Register\";\n\nfunction App() {\n    const [name, setName] = useState('');\n\n    useEffect(() => {\n        (\n            async () => {\n                const response = await fetch('http://localhost:8000/api/auth/user', {\n                    headers: {'Content-Type': 'application/json'},\n                    credentials: 'include',\n                });\n                console.log(name)\n\n                const content = await response.json();\n\n                setName(content.name);\n            }\n        )();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Nav name={name} setName={setName}/>\n                <main className=\"form-signin\">\n                    <Route path=\"/\" exact component={() => <Home name={name} />} />\n                    <Route path=\"/login\" component={() => <Login setName={setName} />} />\n                    <Route path=\"/register\" component={Register} />\n\n                    {/* Conditional Redirect */}\n                    {name === \"admin\" ? (\n                        <Redirect from=\"/\" to=\"/admin\" />\n                    ) : (\n                        <Redirect from=\"/\" to=\"/\" />\n                    )}\n\n                    <Route path=\"/admin\" component={() => <Admin name={name} />} />\n                </main>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Register.tsx",[],"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Login.tsx",[],"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Home.tsx",["41","42","43"],"import React, { ChangeEvent, ChangeEventHandler, useEffect, useRef, useState } from 'react';\n\ntype DataItem = {\n    dataname: string;\n    download_url: string;\n    share_limti: number;\n  };\n\nconst Home = (props: { name: string }) => {\n    \n    // Define a state variable to store the options fetched from the API\n    const [fileList, setFileList] = useState<FileList | null>(null);\n    const [selectedImage, setSelectedImage] = useState('');\n    const [options, setOptions] = useState<DataItem[]>([]);\n    const [selectedOption, setselectedOption] = useState<string>(\"\");\n    const [downloadmessage, setdownloadMessage] = useState('');\n    const [uploadmessage, setuploadMessage] = useState('');\n    const [downloadTimes, setDownloadTimes] = useState(5);\n\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setFileList(e.target.files);\n        \n        const selectedFiles = e.target.files\n\n        if (selectedFiles && selectedFiles.length > 0) {\n            const file = selectedFiles[0];\n            setSelectedImage(URL.createObjectURL(file));\n        }\n    };\n\n    const handleDownload = async () => {\n        if (selectedOption) {\n            const download_url = 'http://localhost:8000/api/auth/download/' + selectedOption\n            try {\n                const response = await fetch(download_url, {\n                    credentials: 'include',\n                });\n\n                if (response.ok) {\n                    // The download was successful, set a success message\n                    setdownloadMessage('File download successful');\n                } else {\n                    // The download failed, set an error message\n                    setdownloadMessage('Error downloading the file: ' + response.statusText);\n                }\n                console.log(response)\n            } catch (error) {\n                console.error('Error downloading the file:', error);\n            }\n        } else {\n            console.error('No option selected for download');\n        }\n    };\n\n    const handleUpload = () => {\n        if (fileList === null || fileList.length === 0) {\n            return\n        }\n        const formData = new FormData()\n        formData.append(`file`, fileList[0], fileList[0].name)\n        formData.append('downloadTimes', downloadTimes.toString());\n        console.log(downloadTimes)\n\n        fetch('http://localhost:8000/api/auth/upload', {\n            method: 'POST',\n            body: formData,\n            credentials: 'include',\n        })\n        .then((response) => {\n            if (response.ok) {\n                // Upload successful, set success message\n                setuploadMessage('File uploaded successfully');\n                return response.json();\n            } else {\n                throw new Error('Upload failed');\n            }\n          })\n\n        // Re-fetch data and update options when the button is clicked\n        fetch('http://localhost:8000/api/auth/UserSearchAllData', {\n            credentials: 'include',\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            setOptions(data);\n        })\n        .catch((error) => {\n            console.error('Error fetching data from the API:', error);\n        });\n    }\n\n    // Use the useEffect hook to fetch data from the API when the component mounts\n    useEffect(() => {\n        fetch('http://localhost:8000/api/auth/UserSearchAllData', {\n            credentials: 'include',\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            setOptions(data);\n        })\n        .catch((error) => {\n            console.error('Error fetching data from the API:', error);\n        });\n    }, []); // The empty dependency array ensures this effect runs only once on component mount\n\n    // Handle the selection change\n    const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setselectedOption(event.target.value);\n    };\n\n    const handleRangeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        // Update the state with the current range value\n        setDownloadTimes(parseInt(event.target.value, 10));\n    };\n\n    \n    return (\n        <div>\n            {props.name ? \n                (\n                    <React.Fragment>\n                        {/* If Authenticated - Upload */}\n                        <input type=\"file\" id=\"myFile\" name=\"filename\"\n                            accept=\"image/*,application/pdf,.doc,.ppt,.csv,.png,.jpg,.pdf,.xls,application/msword,application/vnd.ms-powerpoint\"\n                            onChange={handleFileChange}/>\n                        {selectedImage && (\n                            <img\n                            src={selectedImage}\n                            alt=\"Selected\"\n                            style={{ maxWidth: '600px', maxHeight: '600px' }} // Set your desired max width and max height\n                            />\n                        )}\n                        <br />\n                        <label htmlFor=\"vol\">Download Times (between 0 and 10):</label>\n                        <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"10\" value={downloadTimes} onChange={handleRangeChange}></input>\n                        <p>Selected Value: {downloadTimes}</p>\n                        <br />\n                        <button onClick={handleUpload}>Submit</button>\n                        <p>{uploadmessage}</p>\n                        <br />\n\n                        {/* If Authenticated - Download */}\n                        <label>Select an option: </label>\n                        <select value={selectedOption} onChange={handleSelectChange}>\n                        <option value=\"\">Select an option</option>\n                        {options && options.map((option, index) => (\n                            <option key={option.dataname + index} value={option.download_url}>\n                            {option.dataname}\n                            </option>\n                        ))}\n                        </select>\n                        {selectedOption && <p>Selected option: {selectedOption}</p>}\n                        <button onClick={handleDownload}>Download File</button>\n                        <p>{downloadmessage}</p>\n                        <br  />\n                    </React.Fragment>\n                )\n                :\n                (\n                    // If not Authenticate\n                    'You are not logged in'\n                )\n            }\n        </div>\n    );\n}\n\nexport default Home;\n\n\nfunction setSelectedImage(arg0: string) {\n    throw new Error('Function not implemented.');\n}\n// Optimization: pjchender - Day23","/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/components/Nav.tsx",[],"/Users/tsornghawchen/Workarea/src/upload-and-download-file/React/src/pages/Admin.tsx",["44","45"],"import React, { ChangeEvent, ChangeEventHandler, useEffect, useState } from 'react';\n\ntype DataItems = {\n    id: Uint16Array;\n    upload_time: string;\n    share_time: string;\n    share_limit: number;\n    file_size: number;\n    file_name: string;\n    file_type: string;\n    file_content: string;\n    download_url: string;\n}\n\nconst Admin = (props: { name: string }) => {\n    // Define a state variable to store the options fetched from the API\n    const [fileList, setFileList] = useState<FileList | null>(null);\n    const [selectedImage, setSelectedImage] = useState('');\n    const [options, setOptions] = useState<DataItems[]>([]);\n    const [selectedOption, setSelectedOption] = useState<string>(\"\");\n    const [downloadmessage, setdownloadMessage] = useState('');\n    const [uploadmessage, setuploadMessage] = useState('');\n    const [deleteResponse, setDeleteResponse] = useState('');\n    const [downloadTimes, setDownloadTimes] = useState(5);\n\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setFileList(e.target.files);\n        \n        const selectedFiles = e.target.files\n\n        if (selectedFiles && selectedFiles.length > 0) {\n            const file = selectedFiles[0];\n            setSelectedImage(URL.createObjectURL(file));\n        }\n    };\n\n    const handleDownload = async () => {\n        if (selectedOption) {\n            const download_url = 'http://localhost:8000/api/auth/download/' + selectedOption\n            try {\n                const response = await fetch(download_url, {\n                    credentials: 'include',\n                });\n\n                if (response.ok) {\n                    // The download was successful, set a success message\n                    setdownloadMessage('File download successful');\n                } else {\n                    // The download failed, set an error message\n                    setdownloadMessage('Error downloading the file: ' + response.statusText);\n                }\n                console.log(response)\n            } catch (error) {\n                console.error('Error downloading the file:', error);\n            }\n        } else {\n            console.error('No option selected for download');\n        }\n    };\n\n    const handleUpload = () => {\n        if (fileList === null || fileList.length === 0) {\n            return\n        }\n        const formData = new FormData()\n        formData.append(`file`, fileList[0], fileList[0].name)\n        formData.append('downloadTimes', downloadTimes.toString());\n        console.log(downloadTimes)\n\n        fetch('http://localhost:8000/api/auth/upload', {\n            method: 'POST',\n            body: formData,\n            credentials: 'include',\n        })\n        .then((response) => {\n            if (response.ok) {\n                // Upload successful, set success message\n                setuploadMessage('File uploaded successfully');\n                return response.json();\n            } else {\n                throw new Error('Upload failed');\n            }\n          })\n\n        // Re-fetch data and update options when the button is clicked\n        fetch('http://localhost:8000/api/auth/admin/SearchAllData', {\n            credentials: 'include',\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            setOptions(data);\n        })\n        .catch((error) => {\n            console.error('Error fetching data from the API:', error);\n        });\n    }\n\n    const handleDelete = (downloadUrl: string) => {\n        // Make an API call to delete data using downloadUrl\n        fetch(`http://localhost:8000/api/auth/admin/deletedata`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ download_url: downloadUrl }),\n            credentials: 'include',\n        })\n        .then((response) => {\n            if (response.status === 200) {\n                setDeleteResponse('Data deleted successfully');\n            } else {\n                setDeleteResponse('Failed to delete data');\n            }\n        })\n        .catch((error) => {\n            console.error('Error deleting data:', error);\n        });\n\n        // Re-fetch data and update options when the button is clicked\n        fetch('http://localhost:8000/api/auth/admin/SearchAllData', {\n            credentials: 'include',\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            setOptions(data);\n        })\n        .catch((error) => {\n            console.error('Error fetching data from the API:', error);\n        });\n    };\n\n    // Use the useEffect hook to fetch data from the API when the component mounts\n    useEffect(() => {\n        fetch('http://localhost:8000/api/auth/admin/SearchAllData', {\n            credentials: 'include',\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            setOptions(data);\n        })\n        .catch((error) => {\n            console.error('Error fetching data from the API:', error);\n        });\n    }, []); // The empty dependency array ensures this effect runs only once on component mount\n\n    // Handle the selection change\n    const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedOption(event.target.value);\n    };\n\n    const handleRangeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        // Update the state with the current range value\n        setDownloadTimes(parseInt(event.target.value, 10));\n    };\n    \n    const tableStyle: React.CSSProperties = {\n        width: '100%', // Set the table width to 100%\n        borderCollapse: 'collapse', // Merge adjacent cell borders\n        border: '1px solid #ccc', // Add a border to the table\n    };\n\n    const thStyle: React.CSSProperties = {\n        backgroundColor: '#f2f2f2',\n        padding: '10px',\n        border: '1px solid #000', // Add a border to table header cells\n    };\n    \n    const tdStyle: React.CSSProperties = {\n        padding: '8px',\n        border: '1px solid #ccc',\n    };\n\n    const buttonStyleadmin: React.CSSProperties = {\n        backgroundColor: '#007bff', // Blue background color\n        color: '#fff', // White text color\n        padding: '10px 20px', // Padding around the text\n        border: 'none', // Remove the default button border\n        borderRadius: '4px', // Add rounded corners\n        cursor: 'pointer', // Change cursor to a pointer on hover\n    };\n    \n    return (\n        <div>\n            {props.name ? \n                (\n                    <React.Fragment>\n                        {/* If Authenticated - Upload */}\n                        <input type=\"file\" id=\"myFile\" name=\"filename\"\n                            accept=\"image/*,application/pdf,.doc,.ppt,.csv,.png,.jpg,.pdf,.xls,application/msword,application/vnd.ms-powerpoint\"\n                            onChange={handleFileChange}/>\n                        {selectedImage && (\n                            <img\n                            src={selectedImage}\n                            alt=\"Selected\"\n                            style={{ maxWidth: '600px', maxHeight: '600px' }}\n                            />\n                        )}\n                        <br />\n                        <label htmlFor=\"vol\">Download Times (between 0 and 10):</label>\n                        <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"10\" value={downloadTimes} onChange={handleRangeChange}></input>\n                        <p>Selected Value: {downloadTimes}</p>\n                        <br />\n                        <button onClick={handleUpload}>Submit</button>\n                        <p>{uploadmessage}</p>\n                        <br />\n\n                        {/* If Authenticated - Download */}\n                        <label>Select an option: </label>\n                        <select value={selectedOption} onChange={handleSelectChange}>\n                        <option value=\"\">Select an option</option>\n                        {options && options.map((option, index) => (\n                            <option key={option.file_name + index} value={option.download_url}>\n                            {option.file_name}\n                            </option>\n                        ))}\n                        </select>\n                        {selectedOption && <p>Selected option: {selectedOption}</p>}\n                        <button onClick={handleDownload}>Download File</button>\n                        <p>{downloadmessage}</p>\n                        <br  />\n\n                        {/* If Authenticated - Data List and Delete */}\n                        <table style={tableStyle}>\n                            <thead>\n                            <tr>\n                                <th style={thStyle}>File_name</th>\n                                <th style={thStyle}>Upload_time</th>\n                                <th style={thStyle}>Share_limit</th>\n                                <th style={thStyle}>File_size</th>\n                                <th style={thStyle}>File_type</th>\n                                <th style={thStyle}>download_url</th>\n                                <th style={thStyle}>edit_button</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                                {options && options.map((option) => (\n                                    <tr key={option.file_name}>\n                                        <td style={tdStyle}>{option.file_name}</td>\n                                        <td style={tdStyle}>{option.upload_time}</td>\n                                        <td style={tdStyle}>{option.share_limit}</td>\n                                        <td style={tdStyle}>{(option.file_size / 1000).toFixed(2)} KB</td>\n                                        <td style={tdStyle}>{option.file_type}</td>\n                                        <td style={tdStyle}>\"http://localhost:8000/\" + {option.download_url}</td>\n                                        <td style={tdStyle}>\n                                            <button style={buttonStyleadmin} onClick={() => handleDelete(option.download_url)}>\n                                                Delete\n                                            </button>\n                                            {deleteResponse}\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </React.Fragment>\n                )\n                :\n                (\n                    // If not Authenticate\n                    'You are not logged in'\n                )\n            }\n        </div>\n    );\n}\n\nexport default Admin;\n\n\nfunction setSelectedImage(arg0: string) {\n    throw new Error('Function not implemented.');\n}\n// Optimization: pjchender - Day23",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":27,"column":8,"nodeType":"52","endLine":27,"endColumn":10,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":30,"nodeType":"56","messageId":"57","endLine":1,"endColumn":48},{"ruleId":"54","severity":1,"message":"58","line":1,"column":61,"nodeType":"56","messageId":"57","endLine":1,"endColumn":67},{"ruleId":"54","severity":1,"message":"59","line":171,"column":10,"nodeType":"56","messageId":"57","endLine":171,"endColumn":26},{"ruleId":"54","severity":1,"message":"55","line":1,"column":30,"nodeType":"56","messageId":"57","endLine":1,"endColumn":48},{"ruleId":"54","severity":1,"message":"59","line":269,"column":10,"nodeType":"56","messageId":"57","endLine":269,"endColumn":26},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["62"],"@typescript-eslint/no-unused-vars","'ChangeEventHandler' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'setSelectedImage' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [name]",{"range":"65","text":"66"},[815,817],"[name]"]